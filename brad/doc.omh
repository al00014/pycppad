$begin pyad$$
$spell
	pycppad
	cppad
$$
$latex \newcommand{\B}[1]{{\bf #1}}$$
$latex \newcommand{\R}[1]{{\rm #1}}$$

$section pyad-20090126: A Python Algorithm Derivative Package$$

$index AD, python$$
$index python, AD$$
$index algorithmic differentiation, python$$
$index automatic differentiation, python$$
$index pycppad$$

$table
$cnext
	Manual split into sections $pre  $$ $cnext
	Manual as one web page
$rnext
Math displayed using Latex $pre  $$ $cnext
	$href/pycppad.htm/$$ $pre  $$ $cnext
	$href/_printable.htm/$$
$rnext
Math displayed using MathML $pre  $$ $cnext
	$href/pycppad.xml/$$ $pre  $$ $cnext
	$href/_printable.xml/$$
$tend

$head Syntax$$
$codei%from pyad.cppad import *%$$

$head Purpose$$
The command above imports a 
$href%http://www.boost.org%boost python%$$
interface to the C++ 
$href%
	http://en.wikipedia.org/wiki/Automatic_differentiation%
	Algorithmic Differentiation (AD)
%$$
package
$href%http://www.coin-or.org/CppAD/CppAD/%CppAD%$$. 

$head Features$$
Operator overloading is used to store the operation sequence
corresponding to a python algorithm.
The operation sequence can be evaluated 
to obtain new function values or derivatives of arbitrary order.
In addition, multiple levels of AD are supported.
This means that AD derivatives can be used in the definition of a function
which in true can be differentiated using AD.
See $cref/whats_new_09/$$ for a list of recent extensions and bug fixes.

$childtable%
	omh/install.omh%
	pyad/cppad/__init__.py%
	pyad/cppad/pycppad.cpp%
	pyad/cppad/adfun.cpp%
	example/two_levels.py%
	omh/whats_new_09.omh
%$$

$end
