$begin install$$
$dollar @$$
$spell
	yum
	bashrc
	messaging
	numpy
	usr
	inplace
	undef
	py py
	test test
	CppAD
	cppad
	sys sys
	uninstalling
	distutils
	uninstall
	pycppad
	xvzf
	gz
	py
	gcc
	Wstrict
	Ada
	Obj
$$

$section Installing pycppad$$

$index install, pycppad$$
$index pycppad, install$$

$head Requires$$
This package requires the following other packages:

$list number$$
The Boost Python (development version) must be installed.
$lnext
The python numpy library must be installed.
$lnext
The CppAD package will be automatically downloaded and used
(but not installed).
$lend

$head Downloading$$
$index download, pycppad$$
$index pycppad, download$$
Download the file
$href%
	http://www.seanet.com/~bradbell/pycppad-20100319.tar.gz%
	pycppad-20100319.tar.gz
%$$
and store it on your machine.

$head Unpacking$$
$index unpack, pycppad$$
$index pycppad, unpack$$
$index extract, pycppad$$
$index pycppad, extract$$
On unix, you could use the command
$codep
	tar -xvzf  pycppad-20100319.tar.gz
$$
which would create the directory $code pycppad-20100319$$.

$head Required Setup Information$$
The value of the following setup variables, in the file
$codep
	pycppad-20100319/setup.py
$$
must be set to agree with your system:
$code
$verbatim%setup.template%5%# BEGIN USER SETTINGS%# END USER SETTINGS%$$
$$
Note that Boost Python must be installed before you can
properly set this information
(but CppAD need not be installed).

$head Building$$
$index build, pycppad$$
$index pycppad, build$$

$subhead With Debugging$$
$index debugging, build$$
$index build, debugging$$
Change into the directory $code pycppad-20100319$$ and execute the command
$codep
	./setup.py build_ext --inplace --debug --undef NDEBUG
$$
to compile and link a version of the CppAD extension module
with debugging (improved error messaging).

$subhead Optimized$$
$index optimize, build$$
$index build, optimize$$
You can compile and link an optimized version of the CppAD extension
module with the command
$codep
	./setup.py build_ext --inplace
$$
Note that in the optimized version, certain error checking is not
done and improper use of $code pycppad.cpp$$ may lead to a segmentation fault.

$subhead Bug in Python Distutils$$
$index bug, python distutils$$
$index python, bug distutils$$
$index distutils, python bug$$
When using the GNU C++ compiler $code gcc$$, the warning 
$codep
cc1plus: warning: command line option "-Wstrict-prototypes" is valid for Ada/C/ObjC but not for C++
$$
will be printed. 
This is not requested by $code setup.py$$ but is rather a bug
in the Python 
$href%
	http://docs.python.org/distutils/%
	distutils
%$$
package.

$head Testing$$
$index test, pycppad$$
$index pycppad, test$$
You can test of all the 
$cref/examples/example/$$ in the $code pycppad$$ documentation.
Change into the directory $code pycppad-20100319$$ and execute the command
$codep
	python test_example.py
$$
You can run some more tests with the command
$codep
	python test_more.py
$$

$head Installing$$
$index install, pycppad$$
$index pycppad, install$$
Installing $code pycppad$$ copies it to the standard location for you system.
You may or may not preform this step:
$pre

$$
Change into the directory $code pycppad-20100319$$ and execute the command
$codei%
	python setup.py install --prefix=%prefix%
%$$
or just
$codei%
	./setup.py install --prefix=%prefix%
%$$
where $icode prefix$$ is the prefix for the location
where  you wish to install $code pycppad$$.
Note that some common choices for $icode prefix$$ are
$table
$code @HOME$$ $cnext if you are not the system administrator for this machine 
$rnext
$code /usr/local$$ $cnext you're administrator and the system
has a package manager (like $code yum$$, $code apt-get$$). 
$rnext
$code /usr$$       $cnext you're the administrator but the system does not
have a package manager.
$tend

$subhead Uninstalling$$
Unfortunately, python's $code distutils$$ package does not provide
an uninstall command. You can uninstall the $code pycppad$$ package
by removing the entries
$codei%
	%prefix%/lib/python%major%.%minor%/site-packages/pycppad
	%prefix%/lib/python%major%.%minor%/site-packages/pycppad-20100319.egg-info
	%prefix%/share/doc/pycppad
%$$
where $icode major$$ and $icode minor$$
are the major and minor version numbers printed by the command
$codep
	python --version
$$

$head Python Path$$
$index python, path$$
$index path, python$$
If you have not installed $code pycppad$$,
you will not be able to use the python command
$codei%
	import pycppad
%$$
unless the distribution directory
$codep
	pycppad-20100319
$$
is in your python path.
If you have installed $code pycppad$$,
the installation directory
$codei%
	%prefix%/lib/python%major%.%minor%/site-packages
%$$
must be in you python path (to use the $code import pycppad$$ command).
You can check your python path with the following commands
$codep
	python
	import sys
	sys.path
$$
If the required directory is not yet there,
you could add the directory above to your python path using the command
$codei%
	sys.path.append('%prefix%/lib/python%major%.%minor%/site-packages')
%$$
You can avoid having to do this every time you load python by adding
the path to your environment variable $code PYTHONPATH$$.
For example, if you are using the $code bash$$ shell, you could
add the command
$codei%
	export PYTHONPATH="%prefix%/lib/python%major%.%minor%/site-packages"
%$$
to your $code @HOME/.bashrc$$ file.

$head pycppad Documentation$$
The documentation for $code pycppad$$ starts out in the directory
$codep
	pycppad-20100319/doc
$$
During the installation process, it is copied to the directory
$codei%
	%prefix%/share/doc/pycppad
%$$

$end
