<html><head>
<title>Nonlinear Programming Using the CppAD Interface to Ipopt</title>
<meta name="description" id="description" content="Nonlinear Programming Using the CppAD Interface to Ipopt">
<meta name="keywords" id="keywords" content=" nonlinear programming Cppad Ipopt Ad ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_ipopt_cppad_nlp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Example</option>
<option>General</option>
<option>ipopt_cppad_nlp</option>
</select>
</td>
<td><a href="general.htm" target="_top">Prev</a>
</td><td><a href="ipopt_cppad_windows.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>CppAD-&gt;</option>
<option>Install</option>
<option>Introduction</option>
<option>AD</option>
<option>ADFun</option>
<option>library</option>
<option>preprocessor</option>
<option>Example</option>
<option>Appendix</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>Example-&gt;</option>
<option>General</option>
<option>ExampleUtility</option>
<option>ListAllExamples</option>
<option>test_vector</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>General-&gt;</option>
<option>ipopt_cppad_nlp</option>
<option>Interface2C.cpp</option>
<option>JacMinorDet.cpp</option>
<option>JacLuDet.cpp</option>
<option>HesMinorDet.cpp</option>
<option>HesLuDet.cpp</option>
<option>OdeStiff.cpp</option>
<option>ode_taylor.cpp</option>
<option>ode_taylor_adolc.cpp</option>
<option>StackMachine.cpp</option>
<option>mul_level</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>ipopt_cppad_nlp-&gt;</option>
<option>ipopt_cppad_windows</option>
<option>ipopt_cppad_simple.cpp</option>
<option>ipopt_cppad_ode.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>Warning</option>
<option>fg(x)</option>
<option>---..Index Vector</option>
<option>---..Projection</option>
<option>---..Injection</option>
<option>---..Representation</option>
<option>Simple Representation</option>
<option>SizeVector</option>
<option>NumberVector</option>
<option>ADNumber</option>
<option>ADVector</option>
<option>n</option>
<option>m</option>
<option>x_i</option>
<option>x_l</option>
<option>x_u</option>
<option>g_l</option>
<option>g_u</option>
<option>fg_info</option>
<option>---..fg_info.number_functions</option>
<option>---..fg_info.eval_r</option>
<option>---..fg_info.retape</option>
<option>---..fg_info.domain_size</option>
<option>---..fg_info.range_size</option>
<option>---..fg_info.number_terms</option>
<option>---..fg_info.index</option>
<option>solution</option>
<option>---..status</option>
<option>---..x</option>
<option>---..z_l</option>
<option>---..z_u</option>
<option>---..g</option>
<option>---..lambda</option>
<option>---..obj_value</option>
<option>Visual Studio</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
<center><b><big><big>Nonlinear Programming Using the CppAD Interface to Ipopt</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;include&nbsp;&quot;ipopt_cppad_nlp.hpp&quot;<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>#&nbsp;ipopt_cppad_solution&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>;<br>
</span></font></code>

<code><font color="blue"><span style='white-space: nowrap'>ipopt_cppad_nlp&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>cppad_nlp</span></font></i><font color="blue"><span style='white-space: nowrap'>(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_i</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_l</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_u</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g_l</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g_u</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
The class <code><font color="blue">ipopt_cppad_nlp</font></code> is used to solve nonlinear programming
problems of the form
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rll}<br>
{\rm&nbsp;minimize}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;f(x)&nbsp;<br>
\\<br>
{\rm&nbsp;subject&nbsp;\;&nbsp;to}&nbsp;&amp;&nbsp;g^l&nbsp;\leq&nbsp;g(x)&nbsp;\leq&nbsp;g^u<br>
\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;x^l&nbsp;&nbsp;\leq&nbsp;x&nbsp;&nbsp;&nbsp;\leq&nbsp;x^u<br>
\end{array}<br>
\]&nbsp;</span></code>

This is done using 
<a href="https://www.coin-or.org/projects/Ipopt" target="_top"><span style='white-space: nowrap'>Ipopt</span></a>

optimizer and 
<a href="http://www.coin-or.org/CppAD/" target="_top"><span style='white-space: nowrap'>CppAD</span></a>

Algorithmic Differentiation package.

<br>
<br>
<b><big><a name="Warning" id="Warning">Warning</a></big></b>
<br>
This is only an example use of CppAD.
It is expected that this class will be improved and that
its user interface may change in ways that are not backward compatible.

<br>
<br>
<b><big><a name="fg(x)" id="fg(x)">fg(x)</a></big></b>
<br>
The function <code>
<span style='white-space: nowrap'>&nbsp;fg&nbsp;:&nbsp;\R^n&nbsp;\rightarrow&nbsp;\R^{m+1}</span></code>
 is defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
\begin{array}{rcl}<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fg_0&nbsp;(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;f(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fg_1&nbsp;(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;g_0&nbsp;(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;\vdots&nbsp;&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fg_m&nbsp;(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&nbsp;=&nbsp;&amp;&nbsp;g_{m-1}&nbsp;(x)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\end{array}<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="fg(x).Index Vector" id="fg(x).Index Vector">Index Vector</a></b>
<br>
We define an <i>index vector</i> as a vector of non-negative integers
for which none of the values are equal; i.e.,
it is both a vector and a set.
If <code>
<span style='white-space: nowrap'>&nbsp;I</span></code>
 is an index vector <code>
<span style='white-space: nowrap'>&nbsp;|I|</span></code>
 is used to denote the
number of elements in <code>
<span style='white-space: nowrap'>&nbsp;I</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;\|&nbsp;I&nbsp;\|</span></code>
 is used
to denote the value of the maximum element in <code>
<span style='white-space: nowrap'>&nbsp;I</span></code>
.

<br>
<br>
<b><a name="fg(x).Projection" id="fg(x).Projection">Projection</a></b>
<br>
Given an index vector <code>
<span style='white-space: nowrap'>&nbsp;J</span></code>
 and a positive integer <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;n&nbsp;&gt;&nbsp;\|&nbsp;J&nbsp;\|</span></code>
, we use <code>
<span style='white-space: nowrap'>&nbsp;J&nbsp;\otimes&nbsp;n&nbsp;</span></code>
 for
the mapping <code>
<span style='white-space: nowrap'>&nbsp;(&nbsp;J&nbsp;\otimes&nbsp;n&nbsp;)&nbsp;:&nbsp;\R^n&nbsp;\rightarrow&nbsp;\R^{|J|}</span></code>
 defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&nbsp;J&nbsp;\otimes&nbsp;n&nbsp;]&nbsp;(x)_j&nbsp;=&nbsp;x_{J(j)}<br>
\]&nbsp;</span></code>

for <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;|J|&nbsp;-&nbsp;1</span></code>
.

<br>
<br>
<b><a name="fg(x).Injection" id="fg(x).Injection">Injection</a></b>
<br>
Given an index vector <code>
<span style='white-space: nowrap'>&nbsp;I</span></code>
 and a positive integer <code>
<span style='white-space: nowrap'>&nbsp;m</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;m&nbsp;&gt;&nbsp;\|&nbsp;I&nbsp;\|</span></code>
, we use <code>
<span style='white-space: nowrap'>&nbsp;m&nbsp;\otimes&nbsp;I</span></code>
 for
the mapping <code>
<span style='white-space: nowrap'>&nbsp;(&nbsp;m&nbsp;\otimes&nbsp;I&nbsp;):&nbsp;\R^{|I|}&nbsp;\rightarrow&nbsp;\R^m</span></code>
 defined by
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
[&nbsp;m&nbsp;\otimes&nbsp;I&nbsp;]&nbsp;(y)_i&nbsp;=&nbsp;\left\{&nbsp;\begin{array}{ll}<br>
y_k&nbsp;&amp;&nbsp;{\rm&nbsp;if}&nbsp;\;&nbsp;i&nbsp;=&nbsp;I(k)&nbsp;\;&nbsp;{\rm&nbsp;for&nbsp;\;&nbsp;some}&nbsp;\;&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k&nbsp;\in&nbsp;\{&nbsp;0&nbsp;,&nbsp;\cdots,&nbsp;|I|-1&nbsp;\}&nbsp;<br>
\\<br>
0&nbsp;&nbsp;&nbsp;&amp;&nbsp;{\rm&nbsp;otherwise}<br>
\end{array}&nbsp;\right.<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="fg(x).Representation" id="fg(x).Representation">Representation</a></b>
<br>
In many applications, each of the component functions of <code>
<span style='white-space: nowrap'>&nbsp;fg(x)</span></code>

only depend on a few of the components of <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
.
In this case, expressing <code>
<span style='white-space: nowrap'>&nbsp;fg(x)</span></code>
 in terms of simpler functions
with fewer arguments can greatly reduce the amount of work required
to compute its derivatives.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>We use the functions
<code>
<span style='white-space: nowrap'>&nbsp;r_k&nbsp;:&nbsp;\R^{q(k)}&nbsp;\rightarrow&nbsp;\R^{p(k)}</span></code>
 
for <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K</span></code>
 to express our
representation of <code>
<span style='white-space: nowrap'>&nbsp;fg(x)</span></code>
 in terms of simpler functions
as follows
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
fg(x)&nbsp;=&nbsp;\sum_{k=0}^{K-1}&nbsp;\;&nbsp;\sum_{\ell=0}^{L(k)&nbsp;-&nbsp;1}&nbsp;<br>
[&nbsp;(m+1)&nbsp;\otimes&nbsp;I_{k,\ell}&nbsp;]&nbsp;\;&nbsp;\circ<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\;&nbsp;r_k&nbsp;\;&nbsp;\circ&nbsp;\;&nbsp;[&nbsp;J_{k,\ell}&nbsp;\otimes&nbsp;n&nbsp;]&nbsp;\;&nbsp;(x)<br>
\]&nbsp;</span></code>

where <code>
<span style='white-space: nowrap'>&nbsp;\circ</span></code>
 represents function composition,
for <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K&nbsp;-&nbsp;1</span></code>
, and <code>
<span style='white-space: nowrap'>&nbsp;\ell&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;L(k)</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;I_{k,\ell}</span></code>
 and  <code>
<span style='white-space: nowrap'>&nbsp;J_{k,\ell}</span></code>
 are index vectors with
<code>
<span style='white-space: nowrap'>&nbsp;|&nbsp;J_{k,\ell}&nbsp;|&nbsp;=&nbsp;q(k)</span></code>
, 
<code>
<span style='white-space: nowrap'>&nbsp;\|&nbsp;J_{k,\ell}&nbsp;\|&nbsp;&lt;&nbsp;n</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;|&nbsp;I_{k,\ell}&nbsp;|&nbsp;=&nbsp;p(k)</span></code>
, and
<code>
<span style='white-space: nowrap'>&nbsp;\|&nbsp;I_{k,\ell}&nbsp;\|&nbsp;\leq&nbsp;m</span></code>
. 

<br>
<br>
<b><big><a name="Simple Representation" id="Simple Representation">Simple Representation</a></big></b>
<br>
In the simple representation,
<code>
<span style='white-space: nowrap'>&nbsp;r_0&nbsp;(x)&nbsp;=&nbsp;fg(x)</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;K&nbsp;=&nbsp;1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;q(0)&nbsp;=&nbsp;n</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;p(0)&nbsp;=&nbsp;m+1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;L(0)&nbsp;=&nbsp;1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;I_{0,0}&nbsp;=&nbsp;(0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;m)</span></code>
,
and <code>
<span style='white-space: nowrap'>&nbsp;J_{0,0}&nbsp;=&nbsp;(0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1)</span></code>
.

<br>
<br>
<b><big><a name="SizeVector" id="SizeVector">SizeVector</a></big></b>
<br>
The type 
<code><font color="blue"><span style='white-space: nowrap'>SizeVector</span></font></code>
 is defined by the 

<code><font color="blue"><span style='white-space: nowrap'>ipopt_cppad_nlp.hpp</span></font></code>
 include file to be a 
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of type
<code><font color="blue">size_t</font></code>.

<br>
<br>
<b><big><a name="NumberVector" id="NumberVector">NumberVector</a></big></b>
<br>
The type 
<code><font color="blue"><span style='white-space: nowrap'>NumberVector</span></font></code>
 is defined by the 

<code><font color="blue"><span style='white-space: nowrap'>ipopt_cppad_nlp.hpp</span></font></code>
 include file to be a 
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of type
<code><font color="blue">Ipopt::Number</font></code>.

<br>
<br>
<b><big><a name="ADNumber" id="ADNumber">ADNumber</a></big></b>
<br>
The type 
<code><font color="blue"><span style='white-space: nowrap'>ADNumber</span></font></code>
 is defined by the 

<code><font color="blue"><span style='white-space: nowrap'>ipopt_cppad_nlp.hpp</span></font></code>
 include file to be a 
an AD type that can be used to compute derivatives.

<br>
<br>
<b><big><a name="ADVector" id="ADVector">ADVector</a></big></b>
<br>
The type 
<code><font color="blue"><span style='white-space: nowrap'>ADVector</span></font></code>
 is defined by the 

<code><font color="blue"><span style='white-space: nowrap'>ipopt_cppad_nlp.hpp</span></font></code>
 include file to be a 
<a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 class with elements of type
<code><font color="blue">ADNumber</font></code>. 

<br>
<br>
<b><big><a name="n" id="n">n</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the dimension of the argument space; 
i.e., <code>
<span style='white-space: nowrap'>&nbsp;x&nbsp;\in&nbsp;\R^n</span></code>
.

<br>
<br>
<b><big><a name="m" id="m">m</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It specifies the dimension of the range space for <code>
<span style='white-space: nowrap'>&nbsp;g</span></code>
; 
i.e., <code>
<span style='white-space: nowrap'>&nbsp;g&nbsp;:&nbsp;\R^n&nbsp;\rightarrow&nbsp;\R^m</span></code>
.

<br>
<br>
<b><big><a name="x_i" id="x_i">x_i</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x_i</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NumberVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_i</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
It specifies the initial point where Ipopt starts the optimization process.

<br>
<br>
<b><big><a name="x_l" id="x_l">x_l</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x_l</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NumberVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_l</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
It specifies the lower limits for the argument in the optimization problem;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;x^l</span></code>
.

<br>
<br>
<b><big><a name="x_u" id="x_u">x_u</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x_u</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NumberVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x_u</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
It specifies the upper limits for the argument in the optimization problem;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;x^u</span></code>
.

<br>
<br>
<b><big><a name="g_l" id="g_l">g_l</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>g_l</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NumberVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g_l</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;m</span></code>
.
It specifies the lower limits for the constraints in the optimization problem;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;g^l</span></code>
.

<br>
<br>
<b><big><a name="g_u" id="g_u">g_u</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>g_u</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;NumberVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>g_u</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
It specifies the upper limits for the constraints in the optimization problem;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;g^u</span></code>
.

<br>
<br>
<b><big><a name="fg_info" id="fg_info">fg_info</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>FG_info&nbsp;fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
where the class 
<code><i><font color="black"><span style='white-space: nowrap'>FG_info</span></font></i></code>
 is derived from the 
base class <code><font color="blue">ipopt_cppad_fg_info</font></code>.
Certain virtual member functions of 
<code><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i></code>
 are used to 
compute the value of <code>
<span style='white-space: nowrap'>&nbsp;fg(x)</span></code>
.
The specifications for these member functions are given below:

<br>
<br>
<b><a name="fg_info.fg_info.number_functions" id="fg_info.fg_info.number_functions">fg_info.number_functions</a></b>
<br>
This member function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual&nbsp;size_t&nbsp;ipopt_cppad_fg_info::number_functions(void)<br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i></code>
 has type <code><font color="blue">size_t</font></code>, the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>K</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>.number_functions()<br>
</span></font></code>
sets 
<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i></code>
 to the number of functions used in the
representation of <code>
<span style='white-space: nowrap'>&nbsp;fg(x)</span></code>
; i.e., <code>
<span style='white-space: nowrap'>&nbsp;K</span></code>
 in
the <a href="ipopt_cppad_nlp.htm#fg(x).Representation" target="_top"><span style='white-space: nowrap'>representation</span></a>
 above.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <code><font color="blue">ipopt_cppad_fg_info</font></code> implementation of this function
corresponds to the simple representation mentioned above; i.e.

<code><i><font color="black"><span style='white-space: nowrap'>K</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;1</span></font></code>
.

<br>
<br>
<b><a name="fg_info.fg_info.eval_r" id="fg_info.fg_info.eval_r">fg_info.eval_r</a></b>
<br>
This member function has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
virtual&nbsp;ADVector&nbsp;ipopt_cppad_fg_info::eval_r(size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;const&nbsp;ADVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;=&nbsp;0;<br>
</span></font></code>
Thus it is a pure virtual function and must be defined in the 
derived class 
<code><i><font color="black"><span style='white-space: nowrap'>FG_info</span></font></i></code>
.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>This function computes the value of <code>
<span style='white-space: nowrap'>&nbsp;r_k&nbsp;(u)</span></code>

used in the <a href="ipopt_cppad_nlp.htm#fg(x).Representation" target="_top"><span style='white-space: nowrap'>representation</span></a>

for <code>
<span style='white-space: nowrap'>&nbsp;fg(x)</span></code>
.
If 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 in <code>
<span style='white-space: nowrap'>&nbsp;\{0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1&nbsp;\}</span></code>
 has type <code><font color="blue">size_t</font></code>,

<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
 is an <code><font color="blue">ADVector</font></code> of size 
<code><i><font color="black"><span style='white-space: nowrap'>q(k)</span></font></i></code>
 
and 
<code><i><font color="black"><span style='white-space: nowrap'>r</span></font></i></code>
 is an <code><font color="blue">ADVector</font></code> of size 
<code><i><font color="black"><span style='white-space: nowrap'>p(k)</span></font></i></code>

the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>r</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>.eval_r(</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>u</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
set 
<code><i><font color="black"><span style='white-space: nowrap'>r</span></font></i></code>
 to the vector <code>
<span style='white-space: nowrap'>&nbsp;r_k&nbsp;(u)</span></code>
.

<br>
<br>
<b><a name="fg_info.fg_info.retape" id="fg_info.fg_info.retape">fg_info.retape</a></b>
<br>
This member function has the prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual&nbsp;bool&nbsp;ipopt_cppad_fg_info::retape(size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 in <code>
<span style='white-space: nowrap'>&nbsp;\{0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1&nbsp;\}</span></code>
 has type <code><font color="blue">size_t</font></code>,
and 
<code><i><font color="black"><span style='white-space: nowrap'>retape</span></font></i></code>
 has type <code><font color="blue">bool</font></code>,
the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>retape</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>.retape(</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets 
<code><i><font color="black"><span style='white-space: nowrap'>retape</span></font></i></code>
 to true or false.
If 
<code><i><font color="black"><span style='white-space: nowrap'>retape</span></font></i></code>
 is true, 
<code><font color="blue">ipopt_cppad_nlp</font></code> will retape the operation sequence 
corresponding to <code>
<span style='white-space: nowrap'>&nbsp;r_k&nbsp;(u)</span></code>
 for
every value of 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
. 
An <code><font color="blue">ipopt_cppad_nlp</font></code> object
should use much less memory and run faster if 
<code><i><font color="black"><span style='white-space: nowrap'>retape</span></font></i></code>
 is false.
You can test both the true and false cases to make sure 
the operation sequence does not depend on 
<code><i><font color="black"><span style='white-space: nowrap'>u</span></font></i></code>
.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <code><font color="blue">ipopt_cppad_fg_info</font></code> implementation of this function
sets 
<code><i><font color="black"><span style='white-space: nowrap'>retape</span></font></i></code>
 to true 
(while slower it is also safer to always retape).

<br>
<br>
<b><a name="fg_info.fg_info.domain_size" id="fg_info.fg_info.domain_size">fg_info.domain_size</a></b>
<br>
This member function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual&nbsp;size_t&nbsp;ipopt_cppad_fg_info::domain_size(size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 in <code>
<span style='white-space: nowrap'>&nbsp;\{0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1&nbsp;\}</span></code>
 has type <code><font color="blue">size_t</font></code>,
and 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 has type <code><font color="blue">size_t</font></code>, the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>.domain_size(</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 to the dimension of the domain space for <code>
<span style='white-space: nowrap'>&nbsp;r_k&nbsp;(u)</span></code>
;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;q(k)</span></code>
 in
the <a href="ipopt_cppad_nlp.htm#fg(x).Representation" target="_top"><span style='white-space: nowrap'>representation</span></a>
 above.

<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <code><font color="blue">ipopt_cppad_h_base</font></code> implementation of this function
corresponds to the simple representation mentioned above; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;q&nbsp;=&nbsp;n</span></code>
.

<br>
<br>
<b><a name="fg_info.fg_info.range_size" id="fg_info.fg_info.range_size">fg_info.range_size</a></b>
<br>
This member function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual&nbsp;size_t&nbsp;ipopt_cppad_fg_info::range_size(size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 in <code>
<span style='white-space: nowrap'>&nbsp;\{0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1&nbsp;\}</span></code>
 has type <code><font color="blue">size_t</font></code>,
and 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 has type <code><font color="blue">size_t</font></code>, the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>.range_size(</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 to the dimension of the range space for <code>
<span style='white-space: nowrap'>&nbsp;r_k&nbsp;(u)</span></code>
;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;p(k)</span></code>
 in
the <a href="ipopt_cppad_nlp.htm#fg(x).Representation" target="_top"><span style='white-space: nowrap'>representation</span></a>
 above.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <code><font color="blue">ipopt_cppad_h_base</font></code> implementation of this function
corresponds to the simple representation mentioned above; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;p&nbsp;=&nbsp;m+1</span></code>
.

<br>
<br>
<b><a name="fg_info.fg_info.number_terms" id="fg_info.fg_info.number_terms">fg_info.number_terms</a></b>
<br>
This member function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual&nbsp;size_t&nbsp;ipopt_cppad_fg_info::number_terms(size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
If 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
 in <code>
<span style='white-space: nowrap'>&nbsp;\{0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;K-1&nbsp;\}</span></code>
 has type <code><font color="blue">size_t</font></code>,
and 
<code><i><font color="black"><span style='white-space: nowrap'>L</span></font></i></code>
 has type <code><font color="blue">size_t</font></code>, the syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>L</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>.number_terms(</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets 
<code><i><font color="black"><span style='white-space: nowrap'>L</span></font></i></code>
 to the number of terms in representation
for this value of 
<code><i><font color="black"><span style='white-space: nowrap'>k</span></font></i></code>
;
i.e., <code>
<span style='white-space: nowrap'>&nbsp;L(k)</span></code>
 in
the <a href="ipopt_cppad_nlp.htm#fg(x).Representation" target="_top"><span style='white-space: nowrap'>representation</span></a>
 above.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <code><font color="blue">ipopt_cppad_h_base</font></code> implementation of this function
corresponds to the simple representation mentioned above; i.e.,
<code>
<span style='white-space: nowrap'>&nbsp;L&nbsp;=&nbsp;1</span></code>
.

<br>
<br>
<b><a name="fg_info.fg_info.index" id="fg_info.fg_info.index">fg_info.index</a></b>
<br>
This member function has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;virtual&nbsp;void&nbsp;ipopt_cppad_fg_info::index(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;size_t&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ell</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;SizeVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>I</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;SizeVector&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>J</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br>
</span></font></code>
The argument 

<code><i><font color="black"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k<br>
</span></font></i></code>
has type 
<code><font color="blue"><span style='white-space: nowrap'>size_t</span></font></code>

and is a value between zero and <code>
<span style='white-space: nowrap'>&nbsp;K-1</span></code>
 inclusive.
The argument 

<code><i><font color="black"><span style='white-space: nowrap'>&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ell<br>
</span></font></i></code>
has type 
<code><font color="blue"><span style='white-space: nowrap'>size_t</span></font></code>

and is a value between zero and <code>
<span style='white-space: nowrap'>&nbsp;L(k)-1</span></code>
 inclusive.
The argument 

<code><i><font color="black"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I<br>
</span></font></i></code>
is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 with elements
of type <code><font color="blue">size_t</font></code> and size greater than or equal to <code>
<span style='white-space: nowrap'>&nbsp;p(k)</span></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>I</span></font></i></code>
 does not matter.
The output value of
the first <code>
<span style='white-space: nowrap'>&nbsp;p(k)</span></code>
 elements of 
<code><i><font color="black"><span style='white-space: nowrap'>I</span></font></i></code>
 
must be the corresponding elements of <code>
<span style='white-space: nowrap'>&nbsp;I_{k,ell}</span></code>
 
in the <a href="ipopt_cppad_nlp.htm#fg(x).Representation" target="_top"><span style='white-space: nowrap'>representation</span></a>
 above.
The argument 

<code><i><font color="black"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;J<br>
</span></font></i></code>
is a <a href="simplevector.htm" target="_top"><span style='white-space: nowrap'>SimpleVector</span></a>
 with elements
of type <code><font color="blue">size_t</font></code> and size greater than or equal to <code>
<span style='white-space: nowrap'>&nbsp;q(k)</span></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>J</span></font></i></code>
 does not matter.
The output value of 
the first <code>
<span style='white-space: nowrap'>&nbsp;q(k)</span></code>
 elements of 
<code><i><font color="black"><span style='white-space: nowrap'>J</span></font></i></code>
 
must be the corresponding elements of <code>
<span style='white-space: nowrap'>&nbsp;J_{k,ell}</span></code>
 
in the <a href="ipopt_cppad_nlp.htm#fg(x).Representation" target="_top"><span style='white-space: nowrap'>representation</span></a>
 above.
<code><span style='white-space: nowrap'><br>
<br>
</span></code>The <code><font color="blue">ipopt_cppad_h_base</font></code> implementation of this function
corresponds to the simple representation mentioned above; i.e.,
for <code>
<span style='white-space: nowrap'>&nbsp;i&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;m</span></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>I</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
,
and  for <code>
<span style='white-space: nowrap'>&nbsp;j&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>J</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
.

<br>
<br>
<b><big><a name="solution" id="solution">solution</a></big></b>
<br>
After the optimization process is completed, 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 contains
the following information:

<br>
<br>
<b><a name="solution.status" id="solution.status">status</a></b>
<br>
The 
<code><i><font color="black"><span style='white-space: nowrap'>status</span></font></i></code>
 field of 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ipopt_cppad_solution::solution_status&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.status<br>
</span></font></code>
It is the final Ipopt status for the optimizer. 
Here is a list of the possible values for the status:

<table><tr><td align='left'  valign='top'>


<code><i><font color="black"><span style='white-space: nowrap'>status</span></font></i></code>
 </td><td align='left'  valign='top'>
 Meaning
</td></tr><tr><td align='left'  valign='top'>

not_defined </td><td align='left'  valign='top'>

The optimizer did not return a final status to this <code><font color="blue">ipopt_cppad_nlp</font></code>
object.
</td></tr><tr><td align='left'  valign='top'>

unknown </td><td align='left'  valign='top'>

The status returned by the optimizer is not defined in the Ipopt
documentation for <code><font color="blue">finalize_solution</font></code>.
</td></tr><tr><td align='left'  valign='top'>

success </td><td align='left'  valign='top'>

Algorithm terminated successfully at a point satisfying the convergence 
tolerances (see Ipopt options).
</td></tr><tr><td align='left'  valign='top'>

maxiter_exceeded </td><td align='left'  valign='top'>

The maximum number of iterations was exceeded (see Ipopt options).
</td></tr><tr><td align='left'  valign='top'>

stop_at_tiny_step </td><td align='left'  valign='top'>

Algorithm terminated because progress was very slow.
</td></tr><tr><td align='left'  valign='top'>

stop_at_acceptable_point </td><td align='left'  valign='top'>

Algorithm stopped at a point that was converged, 
not to the 'desired' tolerances, but to 'acceptable' tolerances 
(see Ipopt options).
</td></tr><tr><td align='left'  valign='top'>

local_infeasibility </td><td align='left'  valign='top'>

Algorithm converged to a non-feasible point
(problem may have no solution).
</td></tr><tr><td align='left'  valign='top'>

user_requested_stop </td><td align='left'  valign='top'>

This return value should not happen.
</td></tr><tr><td align='left'  valign='top'>

diverging_iterates </td><td align='left'  valign='top'>

It the iterates are diverging.
</td></tr><tr><td align='left'  valign='top'>

restoration_failure </td><td align='left'  valign='top'>

Restoration phase failed, algorithm doesn't know how to proceed.
</td></tr><tr><td align='left'  valign='top'>

error_in_step_computation </td><td align='left'  valign='top'>

An unrecoverable error occurred while Ipopt tried to 
compute the search direction.
</td></tr><tr><td align='left'  valign='top'>

invalid_number_detected </td><td align='left'  valign='top'>

Algorithm received an invalid number (such as <code><font color="blue">nan</font></code> or <code><font color="blue">inf</font></code>) 
from the users function 
<code><i><font color="black"><span style='white-space: nowrap'>fg_info</span></font></i><font color="blue"><span style='white-space: nowrap'>.eval</span></font></code>
 or from the CppAD evaluations
of its derivatives
(see the Ipopt option <code><font color="blue">check_derivatives_for_naninf</font></code>).
</td></tr><tr><td align='left'  valign='top'>

internal_error </td><td align='left'  valign='top'>

An unknown Ipopt internal error occurred.
Contact the Ipopt authors through the mailing list.
</td></tr>
</table>
<br>
<b><a name="solution.x" id="solution.x">x</a></b>
<br>
The <code><font color="blue">x</font></code> field of 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumberVector&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.x<br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
It is the final <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
 value for the optimizer.

<br>
<br>
<b><a name="solution.z_l" id="solution.z_l">z_l</a></b>
<br>
The <code><font color="blue">z_l</font></code> field of 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumberVector&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.z_l<br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
It is the final Lagrange multipliers for the 
lower bounds on <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
.

<br>
<br>
<b><a name="solution.z_u" id="solution.z_u">z_u</a></b>
<br>
The <code><font color="blue">z_u</font></code> field of 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumberVector&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.z_u<br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
It is the final Lagrange multipliers for the 
upper bounds on <code>
<span style='white-space: nowrap'>&nbsp;x</span></code>
.

<br>
<br>
<b><a name="solution.g" id="solution.g">g</a></b>
<br>
The <code><font color="blue">g</font></code> field of 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumberVector&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.g<br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;m</span></code>
.
It is the final value for the constraint function <code>
<span style='white-space: nowrap'>&nbsp;g(x)</span></code>
.

<br>
<br>
<b><a name="solution.lambda" id="solution.lambda">lambda</a></b>
<br>
The <code><font color="blue">lambda</font></code> field of 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NumberVector&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.lambda<br>
</span></font></code>
and its size is equal to <code>
<span style='white-space: nowrap'>&nbsp;m</span></code>
.
It is the final value for the 
Lagrange multipliers corresponding to the constraint function.

<br>
<br>
<b><a name="solution.obj_value" id="solution.obj_value">obj_value</a></b>
<br>
The <code><font color="blue">obj_value</font></code> field of 
<code><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Number&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>solution</span></font></i><font color="blue"><span style='white-space: nowrap'>.obj_value<br>
</span></font></code>
It is the final value of the objective function <code>
<span style='white-space: nowrap'>&nbsp;f(x)</span></code>
.




<br>
<br>
<b><big><a name="Visual Studio" id="Visual Studio">Visual Studio</a></big></b>
<br>
If you are using Visual Studio, see the special
<a href="ipopt_cppad_windows.htm" target="_top"><span style='white-space: nowrap'>ipopt_cppad_windows</span></a>
 instructions.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file 
<a href="ipopt_cppad_simple.cpp.htm" target="_top"><span style='white-space: nowrap'>ipopt_cppad_simple.cpp</span></a>
 is an example and test of <code><font color="blue">ipopt_cppad_nlp</font></code>.
that uses the 
<a href="ipopt_cppad_nlp.htm#Simple Representation" target="_top"><span style='white-space: nowrap'>simple&nbsp;representation</span></a>
.
The file
<a href="ipopt_cppad_ode.cpp.htm" target="_top"><span style='white-space: nowrap'>ipopt_cppad_ode.cpp</span></a>
 is a more complex example that optimizes
the solution of an ordinary differential equation.
They return true if they succeed and false otherwise.


<hr>Input File: ipopt_cppad/ipopt_cppad_nlp.hpp

</body>
</html>
