<html><head>
<title>Speed Testing Sparse Hessian</title>
<meta name="description" id="description" content="Speed Testing Sparse Hessian">
<meta name="keywords" id="keywords" content=" link_sparse_hessian sparse speed test ">
<style type='text/css'>
BODY { color : black }
BODY { background-color : white }
</style>
<script type='text/javascript' language='JavaScript' src='_link_sparse_hessian_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="http://www.coin-or.org/CppAD/" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>CppAD</option>
<option>Appendix</option>
<option>speed</option>
<option>speed_main</option>
<option>link_sparse_hessian</option>
</select>
</td>
<td><a href="link_poly.htm" target="_top">Prev</a>
</td><td><a href="link_ode.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_down3(this)'>
<option>Appendix-&gt;</option>
<option>Faq</option>
<option>speed</option>
<option>Theory</option>
<option>glossary</option>
<option>Bib</option>
<option>Bugs</option>
<option>WishList</option>
<option>whats_new</option>
<option>include_deprecated</option>
<option>License</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>speed-&gt;</option>
<option>speed_main</option>
<option>speed_utility</option>
<option>speed_double</option>
<option>speed_adolc</option>
<option>speed_cppad</option>
<option>speed_fadbad</option>
<option>speed_sacado</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>speed_main-&gt;</option>
<option>link_det_lu</option>
<option>link_det_minor</option>
<option>link_poly</option>
<option>link_sparse_hessian</option>
<option>link_ode</option>
</select>
</td>
<td>link_sparse_hessian</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Prototype</option>
<option>f</option>
<option>repeat</option>
<option>retape</option>
<option>x</option>
<option>i</option>
<option>j</option>
<option>hessian</option>
<option>---..double</option>
</select>
</td>
</tr></table><br>








<center><b><big><big>Speed Testing Sparse Hessian</big></big></b></center>
<br>
<b><big><a name="Prototype" id="Prototype">Prototype</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>extern&nbsp;bool&nbsp;link_sparse_hessian(<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>repeat</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;size_t&gt;&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;size_t&gt;&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;,&nbsp;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
);<br>
</span></font></code>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
Given a first index vector <code>
<span style='white-space: nowrap'>&nbsp;i</span></code>
 and a second index vector <code>
<span style='white-space: nowrap'>&nbsp;j</span></code>
,
the corresponding function 
<code>
<span style='white-space: nowrap'>&nbsp;f&nbsp;:&nbsp;\R^n&nbsp;\rightarrow&nbsp;\R&nbsp;</span></code>
 is defined by <a href="sparse_evaluate.htm" target="_top"><span style='white-space: nowrap'>sparse_evaluate</span></a>

and the index vectors 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
.
The only non-zero entries in the Hessian of this function have the form
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\DD{f}{x[[k]]}{x[j[k]]}<br>
\]&nbsp;</span></code>

for some <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;</span></code>
 between zero and <code>
<span style='white-space: nowrap'>&nbsp;\ell-1&nbsp;</span></code>
.

<br>
<br>
<b><big><a name="repeat" id="repeat">repeat</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>repeat</span></font></i></code>
 is the number of different functions
<code>
<span style='white-space: nowrap'>&nbsp;f(x)</span></code>
 that the Hessian is computed for.
Each function corresponds to a randomly chosen index vectors, i.e.,
for each repetition a random choice is made for
<code>
<span style='white-space: nowrap'>&nbsp;i[k]</span></code>
 and <code>
<span style='white-space: nowrap'>&nbsp;j[k]</span></code>
 for <code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;\ell-1</span></code>
.

<br>
<br>
<b><big><a name="retape" id="retape">retape</a></big></b>
<br>
For this test, the operation sequence changes for each repetition.
Thus the argument <a href="speed_main.htm#retape" target="_top"><span style='white-space: nowrap'>retape</span></a>
 is not present
because an AD package can not use one recording of the 
operation sequence to compute the gradient for all of the repetitions.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CppAD::vector&lt;double&gt;&nbsp;&amp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 determines 
and is equal to the value of <code>
<span style='white-space: nowrap'>&nbsp;n</span></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 does not matter.
On output, it has been set to the
argument value for which the function,
or its derivative, is being evaluated.
The value of this vector need not change with each repetition.

<br>
<br>
<b><big><a name="i" id="i">i</a></big></b>
<br>
The size of the vector 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 determines and is equal to
the value of <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
.
The input value of the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 does not matter.
On output, it has been set the first index vector
for the last repetition.
All the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 must are between zero and <code>
<span style='white-space: nowrap'>&nbsp;n-1</span></code>
.

<br>
<br>
<b><big><a name="j" id="j">j</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
 is a vector with size <code>
<span style='white-space: nowrap'>&nbsp;\ell</span></code>
.
The input value of its elements does not matter.
On output, it has been set the second index vector
for the last repetition.
All the elements of 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
 must are between zero and <code>
<span style='white-space: nowrap'>&nbsp;n-1</span></code>
.

<br>
<br>
<b><big><a name="hessian" id="hessian">hessian</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
 is a vector with <code>
<span style='white-space: nowrap'>&nbsp;n&nbsp;\times&nbsp;n</span></code>
 elements.
The input value of its elements does not matter. 
The output value of its elements is the Hessian of the function <code>
<span style='white-space: nowrap'>&nbsp;f(x)</span></code>

that corresponds to output values of 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i></code>
, 
<code><i><font color="black"><span style='white-space: nowrap'>j</span></font></i></code>
, and 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
.
To be more specific, for
<code>
<span style='white-space: nowrap'>&nbsp;k&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;m&nbsp;=&nbsp;0&nbsp;,&nbsp;\ldots&nbsp;,&nbsp;n-1</span></code>
,
<code>
<span style='white-space: nowrap'>&nbsp;\[<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\DD{f}{x[k]}{x[m]}&nbsp;(x)&nbsp;=&nbsp;hessian&nbsp;[&nbsp;k&nbsp;*&nbsp;n&nbsp;+&nbsp;m&nbsp;]<br>
\]&nbsp;</span></code>


<br>
<br>
<b><a name="hessian.double" id="hessian.double">double</a></b>
<br>
In the case where 
<code><i><font color="black"><span style='white-space: nowrap'>package</span></font></i></code>
 is <code><font color="blue">double</font></code>,
only the first element of 
<code><i><font color="black"><span style='white-space: nowrap'>hessian</span></font></i></code>
 is used and it is actually 
the value of <code>
<span style='white-space: nowrap'>&nbsp;f(x)</span></code>
 (<code>
<span style='white-space: nowrap'>&nbsp;f^{(2)}&nbsp;(x)</span></code>
 is not computed).


<hr>Input File: speed/link_sparse_hessian.cpp

</body>
</html>
